import numpy as np
import matplotlib.pyplot as plt
import random
import torch
from torch.utils.data import Dataset

def show_img(img, mean, std):
    img = img.mean(dim=0)
    img = img * std + mean
    npimg = img.numpy()
    plt.imshow(npimg)
    plt.title("Sanity Check: Are images correctly downloaded?")
    plt.show()

def extract_patches(dataset: Dataset, patch_size=10) -> torch.Tensor:
    """
    Extracts random patches from the given dataset of images and returns them.
    :param dataset: An instance of `torch.utils.data.Dataset`
    :param patch_size: size of the random patches, in pixels.
    :return: a tensor containing all the patches stacked together.
    """
    patches = []
    for image, _ in dataset:
        c, h, w = image.shape
        if h >= patch_size and w >= patch_size:
            top = random.randint(0, h - patch_size)
            left = random.randint(0, w - patch_size)
            patch = image[:, top:top+patch_size, left:left+patch_size]
            patches.append(patch)
    return torch.stack(patches)

def display_patches(patches: torch.Tensor, num_patches=10) -> None:
    """
    Display the patches generated by `utils.extract_patches`
    :param patches: the tensor returned by `utils.extract_patches`
    :param num_patches: Number of patches to show in a panel
    :return: None
    """
    fig, axs = plt.subplots(1, num_patches, figsize=(15, 5))
    for i in range(num_patches):
        axs[i].imshow(patches[i][0].numpy(), cmap='gray')
        axs[i].axis('off')
    plt.show()
